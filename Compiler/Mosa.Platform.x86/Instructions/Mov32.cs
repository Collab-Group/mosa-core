// Copyright (c) MOSA Project. Licensed under the New BSD License.

// This code was generated by an automated template.

using Mosa.Compiler.Framework;
using System.Diagnostics;

namespace Mosa.Platform.x86.Instructions
{
	/// <summary>
	/// Mov32
	/// </summary>
	/// <seealso cref="Mosa.Platform.x86.X86Instruction" />
	public sealed class Mov32 : X86Instruction
	{
		internal Mov32()
			: base(1, 1)
		{
		}

		public override void Emit(InstructionNode node, OpcodeEncoder opcodeEncoder)
		{
			System.Diagnostics.Debug.Assert(node.ResultCount == 1);
			System.Diagnostics.Debug.Assert(node.OperandCount == 1);

			//if (node.Operand1.Type.Namespace.Contains("MOSA1")) 
			if (
				node.Operand1.Type.BaseType != null &&
				node.Operand1.Type.BaseType.FullName == "System.Object" && 
				node.Operand1.Type.FullName != "System.String"
				)
				//Debugger.Break();
				opcodeEncoder.AppendBytes(new byte[]
				{
					0xC7 ,0x40 ,0x04 ,0x01 ,0x00 ,0x00 ,0x00
				});

			if (node.Operand1.IsCPURegister)
			{
				opcodeEncoder.Append8Bits(0x8B);
				opcodeEncoder.Append2Bits(0b11);
				opcodeEncoder.Append3Bits(node.Result.Register.RegisterCode);
				opcodeEncoder.Append3Bits(node.Operand1.Register.RegisterCode);
				return;
			}

			if (node.Operand1.IsConstant)
			{
				opcodeEncoder.Append8Bits(0xC7);
				opcodeEncoder.Append2Bits(0b11);
				opcodeEncoder.Append3Bits(0b000);
				opcodeEncoder.Append3Bits(node.Result.Register.RegisterCode);
				opcodeEncoder.Append32BitImmediate(node.Operand1);
				return;
			}

			throw new Compiler.Common.Exceptions.CompilerException("Invalid Opcode");
		}
	}
}
